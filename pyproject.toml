[build-system]
requires = ["setuptools>=64", "setuptools-scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "pytrickle"
description = "High-performance Python package for real-time video streaming over trickle protocol"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Trickle App Team", email = "team@trickle-app.com"}
]
maintainers = [
    {name = "Trickle App Team", email = "team@trickle-app.com"}
]
keywords = ["video", "streaming", "real-time", "trickle", "multimedia"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Multimedia :: Video",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dynamic = ["dependencies", "optional-dependencies", "version"]

[project.urls]
Homepage = "https://github.com/livepeer/pytrickle"
Repository = "https://github.com/livepeer/pytrickle"
Issues = "https://github.com/livepeer/pytrickle/issues"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["pytrickle*", "examples*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
pytrickle = ["*.py"]

[tool.setuptools.dynamic]
dependencies = {file = ["requirements.txt"]}
optional-dependencies.dev = {file = ["requirements-dev.txt"]}
optional-dependencies.examples = {file = ["examples/requirements.txt"]}

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "integration: marks tests as integration tests (requires http-trickle)",
    "slow: marks tests as slow (may take longer to run)",
    "gpu: marks tests that require GPU/CUDA",
]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
]
asyncio_mode = "auto"
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:torch.*",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "av.*",
    "PIL.*",
    "numpy.*",
    "pynvml.*",
]
ignore_missing_imports = true

[tool.setuptools_scm]
# Enable setuptools-scm for automatic version management from Git tags
write_to = "pytrickle/_version.py"
fallback_version = "0.0.0"